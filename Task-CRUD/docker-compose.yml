version: '3.8'

services:
  app:
    container_name: task-crud-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
      kafka:
        condition: service_healthy
    env_file:
      - .env
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  db:
    container_name: postgres-db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgre
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis-server
    image: redis:7
    command: ["redis-server", "--port", "6380", "--requirepass", "secret123"]
    ports:
      - "6380:6380"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.49
    ports:
      - "16686:16686"   # Web UI
      - "6831:6831/udp" # UDP collector
    networks:
      - app-network
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - app-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
